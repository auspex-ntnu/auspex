[tool.poetry]
name = "reporter"
version = "0.1.0"
description = ""
authors = ["Peder Hovdan Andresen <pedeha@stud.ntnu.no>"]

[tool.poetry.dependencies]
python = "^3.9"
PyLaTeX = "^1.4.1"
fastapi = "0.68.2"
uvicorn = "^0.17.4"
firebase-admin = "^5.2.0"
loguru = "^0.6.0"
sanitize-filename = "^1.2.0"
matplotlib = "^3.5.1"
debugpy = "^1.6.0"
auspex-core = { path = "../core", develop = true }
more-itertools = "^8.12.0"

[tool.poetry.dev-dependencies]
pytest = "7.1.0"
mypy = "^0.931"
black = "^22.1.0"
hypothesis = "^6.39.3"
pytest-cov = "^3.0.0"
poethepoet = "^0.13.1"
pytest-asyncio = "^0.18.2"
httpx = "^0.22.0"

[tool.poe.tasks]
test = "pytest"
testcov = "coverage run -m pytest --cov=reporter"
testcov100 = { shell = "poe test  | grep -v '100%'" }
testhtml = { shell = "poe testcov --cov-report html:cov_html" }
serve = { script = "reporter:app(debug=True)" }                  # python script based task
tunnel = { shell = "ssh -N -L 0.0.0.0:8080:$PROD:8080 $PROD &" } # (posix) shell based task

[tool.pytest.ini_options]
filterwarnings = [
    # Numpy warnings that we already handle internally
    'ignore:Mean of empty slice.',
    'ignore:Degrees of freedom',
    'ignore:invalid value encountered',
]

[tool.coverage.run]
omit = [
    "reporter/_mock.py",
    "reporter/frontends/latex/example.py",
    # "other/file.py",
    # "some/path/*"
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
